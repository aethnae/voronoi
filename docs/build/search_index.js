var documenterSearchIndex = {"docs":
[{"location":"","page":"-","title":"-","text":"Modules = [Voronoi]","category":"page"},{"location":"#Voronoi.Border","page":"-","title":"Voronoi.Border","text":"mutable struct Border <: Edge\n\nAn outer border edge used for triangulation initialization. Edges enclose their triangle in anticlockwise order. Due to the double-linked references, attributes may be initialized as nothing.\n\nAttributes\n\norigin::Vertex The origin vertex of this directed edge.\nnext::Union{Edge,Nothing} The next edge of the triangle.\nprev::Union{Edge,Nothing} The preceding edge of the triangle.\nface::Union{Face,Nothing} The triangle face containing this edge.\n\nConstructors\n\nBorder(o::Vertex) only sets the origin vertex. Other attributes are nothing.\nBorder(o,n,p,f) sets all attributes.\n\n\n\n\n\n","category":"type"},{"location":"#Voronoi.Delaunay","page":"-","title":"Voronoi.Delaunay","text":"mutable struct Delaunay\n\nThe main triangulation object.\n\nAttributes\n\ntriangles::Set{Triangle} Set of triangles in the Delaunay triangulation.\n\nConstructors\n\nDelaunay() Constructs a pseudo-empty triangulation, containing only one large\n\ntriangle encompassing the entire polygon.\n\nFunctions\n\nD::Delaunay + T::Triangle adds the triangle to the triangulation.\nD::Delaunay - T::Triangle removes the triangle from the triangulation.\n\n\n\n\n\n","category":"type"},{"location":"#Voronoi.Edge","page":"-","title":"Voronoi.Edge","text":"abstract type Edge\n\nRepresents an edge in the Delaunay triangulation.\n\nSubtypes\n\n@Border Edge outside of polygon space, used for initialization.\n@HalfEdge Edge created when adding new vertices.\n\n\n\n\n\n","category":"type"},{"location":"#Voronoi.HalfEdge","page":"-","title":"Voronoi.HalfEdge","text":"mutable struct HalfEdge <: Edge\n\nAn edge created when adding new points to the triangulation. Each half-edge is only contained within a single triangle. Adjacent triangles contain a twin of this edge pointing in the opposite direction. Edges enclose their triangle in anticlockwise order. Due to the double-linked references, attributes may be initialized as nothing.\n\nAttributes\n\norigin::Vertex The origin vertex of this directed edge.\ntwin::Union{HalfEdge,Nothing} The twin half-edge.\nnext::Union{Edge,Nothing} The next edge of the triangle.\nprev::Union{Edge,Nothing} The preceding edge of the triangle.\nface::Union{Face,Nothing} The triangle face containing this edge.\n\nConstructors\n\nHalfEdge(o::Vertex) only sets the origin. Other attributes are nothing.\nHalfEdge(o,t,n,p,f) sets all attributes.\n\n\n\n\n\n","category":"type"},{"location":"#Voronoi.Triangle","page":"-","title":"Voronoi.Triangle","text":"mutable struct Triangle <: Face\n\nA triangle of the triangulation. Convenience object to connect edges.\n\nAttributes\n\nedge::Union{Edge,Nothing} One of the edges of the triangle.\n\nConstructors\n\nTriangle(xy::Edge, yz::Edge, zx::Edge) constructs a triangle XYZ from given\n\nedges XY, YZ and ZX. This connects their next, prev and face attributes.\n\nFunctions\n\nT1::Triangle == T2::Triangle determines if the triangles share any edge.\n\n\n\n\n\n","category":"type"},{"location":"#Voronoi.Vertex","page":"-","title":"Voronoi.Vertex","text":"struct Vertex\n\nRepresents a point in the plane, placed by a player.\n\nAttributes\n\nx::Float64 The x-coordinate of the vertex, must be in [0,1].\ny::Float64 The y-coordinate of the vertex, must be in [0,1].\nplayer::Union{Int, Nothing} The player number, must be in {1,2}. For testing purposes,\n\na nothing value is permitted.\n\nConstructors\n\nVertex(x,y,p) Constructs a vertex with player=p.\nVertex(x,y) Constructs a vertex with player=nothing.\n\nFunctions\n\na::Vertex + b::Vertex adds the coordinates into a vertex with player=nothing.\na::Vertex - b::Vertex subtracts the coordinates into a vertex with player=nothing.\na::Vertex * b::Vertex calculates the dot product, xx + yy.\nk::Float64 * b::Vertex scales the coordinates by a factor.\n\n\n\n\n\n","category":"type"},{"location":"#Base.round-Tuple{Vertex}","page":"-","title":"Base.round","text":"round(a::Vertex; digits=10, base=2)\n\nRounds the x- and y-coordinates of a vertex to the given precision using @round.\n\n\n\n\n\n","category":"method"},{"location":"#Voronoi.HalfEdges-Tuple{Vertex, Vertex}","page":"-","title":"Voronoi.HalfEdges","text":"HalfEdges(a::Vertex,b::Vertex)::Tuple{HalfEdge, HalfEdge}\n\nUsing vertices a and b, constructs two twin half-edges AB and BA.\n\n\n\n\n\n","category":"method"},{"location":"#Voronoi.areas-Tuple{Dict{Vertex, Vector{Vertex}}}","page":"-","title":"Voronoi.areas","text":"areas(V::Dict{Vertex, Vector{Vertex}})::Dict{Int, Float64}\n\nCalculates the Areas of the players  \n\nInput: Voronoi dict  Output: Dict with the area of the polygons belonging to indiviual players\n\n\n\n\n\n","category":"method"},{"location":"#Voronoi.circumcenter-Tuple{Triangle}","page":"-","title":"Voronoi.circumcenter","text":"circumcenter(T::Triangle)::Vertex\n\nCalculates circumcenter coordinates of a given triangle.\n\n\n\n\n\n","category":"method"},{"location":"#Voronoi.compute_areas-Tuple{GameState}","page":"-","title":"Voronoi.compute_areas","text":"compute_areas(state::GameState)\n\nReturns a Dict mapping player numbers to their Voronoi area.\n\n\n\n\n\n","category":"method"},{"location":"#Voronoi.distance-Tuple{Vertex, Vertex}","page":"-","title":"Voronoi.distance","text":"distance(a::Vertex, b::Vertex)::Float64\n\ncalculates the distance between two vertices\n\n\n\n\n\n","category":"method"},{"location":"#Voronoi.filter_internal_triangles-Tuple{Delaunay}","page":"-","title":"Voronoi.filter_internal_triangles","text":"filter_internal_triangles(D::Delaunay)::Set{Triangle}\n\nFilter out the triangles that have one corner in common with the initial Triangle in Delauney\n\n\n\n\n\n","category":"method"},{"location":"#Voronoi.find_triangle-Tuple{Vertex, Delaunay}","page":"-","title":"Voronoi.find_triangle","text":"find_triangle(p::Vertex, D::Delaunay)::Triangle\n\nFinds the triangle containing the given vertex. The vertex is to the left of each directed edge and does not lie on any edge. If such a triangle does not exist, nothing is returned.\n\n\n\n\n\n","category":"method"},{"location":"#Voronoi.flip!-Tuple{HalfEdge, Delaunay}","page":"-","title":"Voronoi.flip!","text":"flip!(ab::HalfEdge, D::Delaunay):Tuple{Delaunay, Edge, Edge}\n\nShould be called when the following conditions are met:\n\nAB is in triangle ABC,\nBA is in triangle BAP,\nP is inside circumcircle of ABC.\n\nThen it replaces triangles ABC, BAP with APC, BCP. Returns updated Delaunay structure and new edges AP,PB.\n\n\n\n\n\n","category":"method"},{"location":"#Voronoi.game_over-Tuple{GameState}","page":"-","title":"Voronoi.game_over","text":"game_over(state::GameState)::Bool\n\nReturns true if both players have placed all their points.\n\n\n\n\n\n","category":"method"},{"location":"#Voronoi.get_common_points-Tuple{Triangle, Triangle}","page":"-","title":"Voronoi.get_common_points","text":"get_common_points(T1::Triangle, T2::Triangle)::Union{Vector{Vertex},Nothing}\n\ncalculates the common corners of two triangles. Returns nothing if there are none\n\n\n\n\n\n","category":"method"},{"location":"#Voronoi.get_points-Tuple{Triangle}","page":"-","title":"Voronoi.get_points","text":"get_points(T::Triangle)::Vector{Vertex}\n\nreturns the corners of a triangle in a vetctor\n\n\n\n\n\n","category":"method"},{"location":"#Voronoi.in_triangle-Tuple{Vertex, Triangle}","page":"-","title":"Voronoi.in_triangle","text":"in_triangle(p::Vertex, T::Triangle)::Bool\n\nchecks if the point p is a corner of the triangle T\n\n\n\n\n\n","category":"method"},{"location":"#Voronoi.insert_point!-Tuple{Vertex, Delaunay}","page":"-","title":"Voronoi.insert_point!","text":"insert_point!(p::Vertex, D::Delaunay)::Delaunay\n\nCalls insert_point_no_flip! to split triangle ABC containing p into ABP, BCP and CAP. Then calls recursive_flip! to re-satisfy the Delaunay condition.\n\nExample\n\n```julia julia> D = Delaunay();\n\njulia> insert_point!(Vertex(0.6, 0.9), D) Tri{Border[(0.0, 3.0)->(0.0, -2.0)], [(0.0, -2.0)->(0.6, 0.9)], [(0.6, 0.9)->(0.0, 3.0)]} Tri{Border[(0.0, -2.0)->(3.0, 0.0)], [(3.0, 0.0)->(0.6, 0.9)], [(0.6, 0.9)->(0.0, -2.0)]} Tri{Border[(3.0, 0.0)->(0.0, 3.0)], [(0.0, 3.0)->(0.6, 0.9)], [(0.6, 0.9)->(3.0, 0.0)]}\n\n\n\n\n\n","category":"method"},{"location":"#Voronoi.insert_point_no_flip!-Tuple{Vertex, Delaunay}","page":"-","title":"Voronoi.insert_point_no_flip!","text":"insert_point_no_flip!(p::Vertex, D::Delaunay)::Tuple{Delaunay,Edge,Edge,Edge}\n\nInserts point p into triangulation D by constructing new triangles. If p is inside triangle ABC, it is replaced by ABP, BCP and BAP. The old edges AB, BC and CA are also returned such that a flip! can be executed.\n\n\n\n\n\n","category":"method"},{"location":"#Voronoi.intersect_ray_bbox-Tuple{Vertex, Tuple{Float64, Float64}, Vector{Vertex}}","page":"-","title":"Voronoi.intersect_ray_bbox","text":"intersect_ray_bbox(origin::Vertex, dir::Tuple{Float64,Float64}, bbox::Vector{Vertex})\n\nCalculates the intersection of a ray starting in bounding box(bbox)in direction of dir with the edges of the box  \n\n\n\n\n\n","category":"method"},{"location":"#Voronoi.is_delaunay-Tuple{Edge}","page":"-","title":"Voronoi.is_delaunay","text":"is_delaunay(ab::Edge)::Bool\n\nChecks if the Delaunay condition is upheld for this edge. Borders always fulfill the Delaunay condition. For a half-edge AB in triangle ABC, the point D of triangle BAD must not be in the circumcircle of ABC.\n\n\n\n\n\n","category":"method"},{"location":"#Voronoi.is_in_box-Tuple{Vertex, Vector{Vertex}}","page":"-","title":"Voronoi.is_in_box","text":"is_in_box(p::Vertex, bbox::Vector{Vertex})::Bool\n\nChecks if the given Vertex is inside or on the border ob bbox\n\n\n\n\n\n","category":"method"},{"location":"#Voronoi.is_inside-Tuple{Vertex}","page":"-","title":"Voronoi.is_inside","text":"is_inside(v::Vertex)\n\nDetermines if the vertex coordinates place it inside [0,1]².\n\n\n\n\n\n","category":"method"},{"location":"#Voronoi.is_left-Tuple{Vertex, Vertex, Vertex}","page":"-","title":"Voronoi.is_left","text":"is_left(p::Vertex, a::Vertex, b::Vertex)::Bool\n\nUses dot product to determine if a point p is left of a directed edge e. If the point lies exactly on the edge, it is not considered left of the edge.\n\n\n\n\n\n","category":"method"},{"location":"#Voronoi.main-Tuple{}","page":"-","title":"Voronoi.main","text":"main()\n\nPrompt for number of turns, then create the main window.\n\n\n\n\n\n","category":"method"},{"location":"#Voronoi.place_point!-Tuple{GameState, Float64, Float64}","page":"-","title":"Voronoi.place_point!","text":"place_point!(state::GameState, x::Float64, y::Float64)\n\nAttempts to place a point for the current player at (x, y). Returns true if successful, false otherwise.\n\n\n\n\n\n","category":"method"},{"location":"#Voronoi.polygon_area-Tuple{Vector{Vertex}}","page":"-","title":"Voronoi.polygon_area","text":"polygon_area(verts::Vector{Tuple{Float64,Float64}})::Float64\n\nCalculates the area of a Polygon with n corners with shoelace formula\n\nInput: vector of tuples (x, y), where x and y are Float64, sorted counterclockwise. Output: Area of the Polygon\n\n\n\n\n\n","category":"method"},{"location":"#Voronoi.recursive_flip!-Tuple{Edge, Delaunay}","page":"-","title":"Voronoi.recursive_flip!","text":"recursive_flip!(ab::Edge, D::Delaunay)::Delaunay\n\nFlips edge AB if it breaks the Delaunay condition. If flipped, recursively checks AP and PB.\n\n\n\n\n\n","category":"method"},{"location":"#Voronoi.rotate_right-Tuple{HalfEdge}","page":"-","title":"Voronoi.rotate_right","text":"rotate_right(h::HalfEdge)::Tuple{Float64,Float64}\n\nTakes a HalfEdge and returns a direction, that is HalfEdge rotated by 90° counterclockwise\n\n\n\n\n\n","category":"method"},{"location":"#Voronoi.sort_vertices_ccw!-Tuple{Vector{Vertex}}","page":"-","title":"Voronoi.sort_vertices_ccw!","text":"sort_vertices_ccw!(verts::Vector{Tuple{Float64,Float64}})\n\nSorts a list of 2D points in counterclockwise order around their centroid.\n\nInput: vector of tuples (x, y) where x and y are Float64 Output: vector of tuples (x, y) sorted counterclockwise\n\n\n\n\n\n","category":"method"},{"location":"#Voronoi.voronoi-Tuple{Delaunay, Vector{Vertex}}","page":"-","title":"Voronoi.voronoi","text":"voronoi(D::Delaunay)::Tuple{Dict{Vertex,Vector{Vertex}},Dict{Vertex,Vector{Vertex}}}\n\nGives the Voronoi to a Delaunay Outputs: a dict V where each center of a Voronoi polygon is mapped to its corners. \t\t a dict A where each corner of a Voronoipolygon is mapped to its connected corners\n\n\n\n\n\n","category":"method"},{"location":"#Voronoi.winner-Tuple{GameState}","page":"-","title":"Voronoi.winner","text":"winner(state::GameState)\n\nReturns the player number with the largest area, or nothing if tied.\n\n\n\n\n\n","category":"method"}]
}
